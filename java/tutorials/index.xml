<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials-WorldWind Java/NASA WorldWind on NASA WorldWind</title>
    <link>https://worldwind.arc.nasa.gov/java/tutorials/</link>
    <description>Recent content in Tutorials-WorldWind Java/NASA WorldWind on NASA WorldWind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Jul 2017 01:34:55 -0400</lastBuildDate>
    
	<atom:link href="https://worldwind.arc.nasa.gov/java/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Importing Data-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/importing-data/</link>
      <pubDate>Fri, 14 Jul 2017 09:37:03 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/importing-data/</guid>
      <description>Importing Data Follow these instructions to import data to the WorldWind client.
1) Download the WorldWind Java SDK
Follow the instructions on the Get Started page to download and extract the latest WorldWind Java SDK.
2) Run the Install Imagery And Elevations Application
Here is an examples of running the Install Imagery And Elevations application from the command-line:
On Mac OS X and Linux:
java -Xmx1024m -cp MyApp.jar:worldwind.jar:worldwindx.jar:jogl-all.jar:gluegen-rt.jar:gdal.jar gov.nasa.worldwindx.examples.dataimport.InstallImageryAndElevationsDemo  On Windows:</description>
    </item>
    
    <item>
      <title>2D Rendering of Custom Shapes-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/2d-rendering-of-custom-shapes/</link>
      <pubDate>Fri, 14 Jul 2017 09:21:33 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/2d-rendering-of-custom-shapes/</guid>
      <description>2D Rendering of Custom Shapes Custom shapes (Renderables) should display correctly in both 3D and 2D modes. This document describes how custom 3D renderables must be implemented to display correctly in 2D mode. It first describes the necessary background and requirements of 2D mode, then presents steps for achieving correct behavior. Before reading this document we strongly advise that you read the custom-shape tutorial and examine the example code for that tutorial.</description>
    </item>
    
    <item>
      <title>Build a Custom Renderable-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/build-a-custom-renderable/</link>
      <pubDate>Fri, 14 Jul 2017 01:37:13 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/build-a-custom-renderable/</guid>
      <description>window.addEventListener(&#39;load&#39;, function() { $(&#34;table&#34;).addClass(&#34;table table-hover&#34;); });  Build a Custom Renderable This tutorial shows how to implement a custom renderable that draws a cube centered on a geographic position. It is intended for developers familiar with OpenGL, who would like to implement a custom WorldWind Renderable. It may be helpful to follow along with the completed tutorial on GitHub.
Contents  How WorldWind Draws a Scene Implementing Renderable Managing Drawing State Orienting the Cube Drawing the Cube Picking Ordered Rendering Determining if the Cube is Visible Putting it all together  How WorldWind Draws a Scene When WorldWind renders a frame, the SceneController sets up the global drawing state, and then asks each Layer in the Model to render itself.</description>
    </item>
    
    <item>
      <title>Adding New Tactical Symbols-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/adding-new-tactical-symbols/</link>
      <pubDate>Fri, 14 Jul 2017 01:02:30 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/adding-new-tactical-symbols/</guid>
      <description>window.addEventListener(&#39;load&#39;, function() { $(&#34;table&#34;).addClass(&#34;table table-hover&#34;); });  Adding New Tactical Symbols Applications that use symbology may need to use some custom symbols. The application could implement a new symbology set for the custom symbols, but that may be too much work if the number of symbols is small. The easiest way to add a small number of symbols is to assign identifiers to the new symbols that fit into the naming convention of an existing symbol set, and provide icons for the new symbols along side WorldWind&amp;rsquo;s standard icons.</description>
    </item>
    
    <item>
      <title>Tactical Graphic Status-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/tactical-graphic-status/</link>
      <pubDate>Fri, 14 Jul 2017 00:55:10 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/tactical-graphic-status/</guid>
      <description>window.addEventListener(&#39;load&#39;, function() { $(&#34;table&#34;).addClass(&#34;table table-hover&#34;); });  This page lists all of the tactical graphics defined in MIL-STD-2525C, and shows which graphics are supported in WorldWind.
 Appendix B, Tactical Graphics Appendix C, Meteorological and Oceanographic Appendix G, Emergency Management  Appendix B, Tactical Graphics    Hierarchy Description Supported     TACGRP.TSK.BLK Block    TACGRP.TSK.BRH Breach    TACGRP.TSK.BYS Bypass    TACGRP.</description>
    </item>
    
    <item>
      <title>Icon Retriever-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/icon-retriever/</link>
      <pubDate>Fri, 14 Jul 2017 00:41:16 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/icon-retriever/</guid>
      <description>window.addEventListener(&#39;load&#39;, function() { $(&#34;table&#34;).addClass(&#34;table table-hover&#34;); });  Icon Retriever This guide shows how to use the IconRetriever interface to retrieve icons for tactical symbols. The guide is organized into in three sections:
 Usage Parameters Example  Usage Icons in a symbol set are retrieved using an IconRetriever. The retriever&amp;rsquo;s job is to take the identifier for a symbol and construct a BufferedImage that contains the icon for that symbol.</description>
    </item>
    
    <item>
      <title>Tactical Graphics-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/tactical-graphics/</link>
      <pubDate>Fri, 14 Jul 2017 00:11:33 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/tactical-graphics/</guid>
      <description>window.addEventListener(&#39;load&#39;, function() { $(&#34;table&#34;).addClass(&#34;table table-hover&#34;); });  Tactical Graphics A Tactical Graphic is a graphic defined by a symbol set. A graphic can be an icon that is drawn a geographic position, a vector graphic that is positioned using one or more control points, or a line or polygon that is styled according to the symbol set&amp;rsquo;s specification. This guide covers tactical graphics belonging to the U.S. Department of Defense’s Common Warfighting Symbology set, MIL-STD-2525.</description>
    </item>
    
    <item>
      <title>Tactical Symbols-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/tactical-symbols/</link>
      <pubDate>Thu, 13 Jul 2017 23:25:56 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/tactical-symbols/</guid>
      <description>Tactical Symbols A tactical symbol displays graphic and textual information about an object at a single geographic position at a particular point in time. The graphic displayed is typically a screen icon with supplemental text and graphics surrounding the icon. In general, the graphic displayed depends on the symbology set a tactical symbol belongs to. This guide covers tactical symbols belonging to the U.S. Department of Defense&amp;rsquo;s Common Warfighting Symbology set, MIL-STD-2525C.</description>
    </item>
    
    <item>
      <title>Common Problems-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/common-problems/</link>
      <pubDate>Thu, 13 Jul 2017 23:03:35 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/common-problems/</guid>
      <description>Common Problems Many problems encountered by WorldWind developers and their application users have common causes. They therefore have the same solution. Those problems and their fix are listed here.
Problem: NASA Map Layers do not download (HTTP 301) As of January 2017 WorldWind map servers (worldwind*.arc.nasa.gov, data.worldwind.arc.nasa.gov, and builds.worldwind.arc.nasa.gov) exclusively use HTTPS. HTTP requests return a redirect to the HTTPS endpoint. The Java URLConnection class does not follow the redirect protocol.</description>
    </item>
    
    <item>
      <title>Concepts-WorldWind Java/NASA WorldWind</title>
      <link>https://worldwind.arc.nasa.gov/java/tutorials/concepts/</link>
      <pubDate>Thu, 13 Jul 2017 22:58:22 -0400</pubDate>
      
      <guid>https://worldwind.arc.nasa.gov/java/tutorials/concepts/</guid>
      <description>Concepts WorldWind is a collection of components that interactively display 3D geographic information within Java applications. Applications use WorldWind by placing one or more WorldWindow objects in their user interface. That WorldWindow provide the 3D geographic context for the application&amp;rsquo;s information and behaviors.
WorldWind components are extensible. The API is defined primarily by interfaces, so components can be selectively replaced by alternative components. Concrete classes can also be replaced or extended.</description>
    </item>
    
  </channel>
</rss>